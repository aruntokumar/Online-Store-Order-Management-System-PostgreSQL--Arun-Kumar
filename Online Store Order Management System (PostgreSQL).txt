-- Online Store Order Management System (PostgreSQL)--
Create Database Onlinestore_DB

-- Customers table --

CREATE TABLE Customers (
    CUSTOMER_ID int PRIMARY KEY,
    NAME VARCHAR(100),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    ADDRESS TEXT
);

INSERT INTO Customers (CUSTOMER_ID, NAME, EMAIL, PHONE, ADDRESS) VALUES
(1, 'Rajat', 'Rajat@amazon.com', '8468085685', '32 Shalimar'),
(2, 'Varun', 'Varun@amazon.com', '7988047576', '456 Sonipat'),
(3, 'Sumrita', 'Sumrita@amazon.com', '9012345678', '789 Delhi');

-- Products table --

CREATE TABLE Products (
    PRODUCT_ID int PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100),
    CATEGORY VARCHAR(50),
    PRICE NUMERIC(10, 2),
    STOCK INT
);

INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, STOCK) VALUES
(1, 'Laptop', 'Electronics', 1200.00, 10),
(2, 'Smartphone', 'Electronics', 800.00, 0),
(3, 'Chair', 'Furniture', 150.00, 5),
(4, 'Notebook', 'Stationery', 3.00, 100),
(5, 'Pen', 'Stationery', 1.50, 200);

-- Orders table --

CREATE TABLE Orders (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT REFERENCES Customers(CUSTOMER_ID),
    PRODUCT_ID INT REFERENCES Products(PRODUCT_ID),
    QUANTITY INT,
    ORDER_DATE DATE
);

INSERT INTO Orders (ORDER_ID, CUSTOMER_ID, PRODUCT_ID, QUANTITY, ORDER_DATE) VALUES
(1, 1, 1, 1, '2024-12-10'),
(2, 1, 2, 2, '2025-01-05'),
(3, 2, 3, 1, '2025-03-12'),
(4, 2, 4, 5, '2025-04-20'),
(5, 3, 5, 10, '2025-04-25'),
(6, 3, 1, 1, '2025-05-01');

SELECT * FROM Customers
SELECT * FROM Products
SELECT * FROM Orders

-- Retrieve all orders placed by a specific customer --

SELECT o.ORDER_ID, p.PRODUCT_NAME, o.QUANTITY, o.ORDER_DATE
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID
JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID
WHERE c.NAME = 'Rajat';

-- Find products that are out of stock --

SELECT PRODUCT_NAME
FROM Products
WHERE STOCK = 0;

-- Calculate the total revenue generated per product --

SELECT p.PRODUCT_NAME, SUM(o.QUANTITY * p.PRICE) AS TOTAL_REVENUE
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID
GROUP BY p.PRODUCT_NAME;

-- Retrieve the top 5 customers by total purchase amount --

SELECT c.NAME, SUM(o.QUANTITY * p.PRICE) AS TOTAL_SPENT
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID
JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID
ORDER BY TOTAL_SPENT DESC
LIMIT 5;

-- Find customers who placed orders in at least two different product categories --

SELECT c.NAME
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID
JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID
HAVING COUNT(DISTINCT p.CATEGORY) >= 2;

-- Analytics: --
-- Find the month with the highest total sales --

SELECT TO_CHAR(ORDER_DATE, 'YYYY-MM') AS ORDER_MONTH,
       SUM(o.QUANTITY * p.PRICE) AS MONTHLY_SALES
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID
GROUP BY ORDER_MONTH
ORDER BY MONTHLY_SALES DESC
LIMIT 1; 

-- Identify products with no orders in the last 6 months --

SELECT PRODUCT_NAME
FROM Products
WHERE PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM Orders
    WHERE ORDER_DATE >= CURRENT_DATE - INTERVAL '6 months'
);

-- Retrieve customers who have never placed an order --

SELECT NAME
FROM Customers
WHERE CUSTOMER_ID NOT IN (
    SELECT DISTINCT CUSTOMER_ID FROM Orders
);

-- Calculate the average order value across all orders --

SELECT AVG(o.QUANTITY * p.PRICE) AS AVERAGE_ORDER_VALUE
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID;